<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>LoveConnect ‚Äì Home</title>
    <link rel="stylesheet" href="/css/styles.css" />
    <style>
      .search-section {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 2rem 0 1.5rem 0;
      }

      .search-section input,
      .search-section select {
        padding: 0.6rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
      }

      .profiles {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
      }

      .profile-card {
        background: #f9f9f9;
        border-radius: 12px;
        padding: 1.2rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        text-align: center;
      }

      .profile-card h3 {
        margin: 0;
        color: #1d3557;
      }

      .profile-card p {
        margin: 0.3rem 0;
        color: #555;
      }

      .pagination {
        margin-top: 2rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>Find some friends ‚ù§Ô∏è</h1>
        <div class="nav-buttons">
          <a href="#" id="logoutBtn"><button>Logout</button></a>
          <a href="/user"><button class="secondary">My Page</button></a>
        </div>
      </header>

      <div class="search-section">
        <select id="filterField">
          <option value="gender">Gender</option>
          <option value="city">City</option>
          <option value="age">Age</option>
        </select>
        <input
          type="text"
          id="filterValue"
          placeholder="Enter filter value..."
        />
        <button id="filterBtn">Apply Filter</button>
      </div>

      <div class="profiles" id="profilesContainer">
        <!-- Cards will be rendered here -->
      </div>

      <div class="pagination">
        <button id="prevPage">Previous</button>
        <span id="pageIndicator">Page 1</span>
        <button id="nextPage">Next</button>
      </div>
    </div>

    <script>
      let offset = 0;
      const limit = 3;
      let currentPage = 1;
      let activeFilter = null;

      const profilesContainer = document.getElementById("profilesContainer");
      const pageIndicator = document.getElementById("pageIndicator");

      async function fetchForms(flag) {
        let url = `/api/form/page/${offset}/${limit}`;
        if (activeFilter) {
          const { field, value } = activeFilter;
          url = `/api/form/filter/${field}/${value}`;
        }

        const res = await fetch(url);
        const forms = await res.json();
        if (flag) renderProfiles(forms.data.page);
        else renderProfiles(forms.data.forms);
      }

      function renderProfiles(forms) {
        profilesContainer.innerHTML = "";

        if (forms.length === 0) {
          const msg = document.createElement("p");
          msg.textContent = "No profiles found.";
          profilesContainer.appendChild(msg);
          return;
        }

        forms.forEach((form) => {
          const card = document.createElement("div");
          card.className = "profile-card";

          const nameAge = document.createElement("h3");
          nameAge.textContent = `${form.name}, ${form.age}`;

          const city = document.createElement("p");
          city.innerHTML = `<strong>City:</strong> ${form.city}`;

          const gender = document.createElement("p");
          gender.innerHTML = `<strong>Gender:</strong> ${form.gender}`;

          const bio = document.createElement("p");
          bio.innerHTML = `<em>${form.bio}</em>`;

          const inviteForm = document.createElement("form");
          inviteForm.className = "invite-form";
          inviteForm.dataset.userId = form.user_id;

          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = "to_user_id";
          hiddenInput.value = form.user_id;

          const inviteBtn = document.createElement("button");
          inviteBtn.type = "submit";
          inviteBtn.textContent = "üì® Send Invite";

          inviteForm.appendChild(hiddenInput);
          inviteForm.appendChild(inviteBtn);
          card.append(nameAge, city, gender, bio, inviteForm);
          profilesContainer.appendChild(card);

          inviteForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            const toUserId = inviteForm.dataset.userId;

            const res = await fetch(`/api/invite/${toUserId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ receiver_id: toUserId }),
            });

            const data = await res.json();
            if (res.ok) {
              inviteBtn.textContent = "‚úÖ Invite Sent";
              inviteBtn.disabled = true;
            } else {
              alert(data.message || "Invite failed");
            }
          });
        });
      }

      document.getElementById("prevPage").addEventListener("click", () => {
        if (offset >= limit) {
          offset -= limit;
          currentPage--;
          pageIndicator.textContent = `Page ${currentPage}`;
          fetchForms(true);
        }
      });

      document.getElementById("nextPage").addEventListener("click", () => {
        offset += limit;
        currentPage++;
        pageIndicator.textContent = `Page ${currentPage}`;
        fetchForms(true);
      });

      document.getElementById("filterBtn").addEventListener("click", () => {
        const field = document.getElementById("filterField").value;
        const value = document.getElementById("filterValue").value.trim();
        if (value) {
          activeFilter = { field, value };
          offset = 0;
          currentPage = 1;
          pageIndicator.textContent = `Filtered`;
          fetchForms(false);
        }
      });

      document
        .getElementById("logoutBtn")
        .addEventListener("click", async (e) => {
          e.preventDefault();
          const res = await fetch("/api/user/logout", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
          });

          if (res.ok) {
            window.location.href = "/";
          } else {
            const data = await res.json();
            alert(data.message || "Logout error");
          }
        });

      // Initial load
      fetchForms(true);
    </script>
  </body>
</html>
